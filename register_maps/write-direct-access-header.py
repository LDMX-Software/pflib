"""Write the header that includes all of the different LUT options and names them"""

import argparse
from pathlib import Path
from dataclasses import dataclass
import yaml

@dataclass
class DirectAccessParameter:
    register: int
    bit_location: int
    defval: bool

    def __post_init__(self):
        if self.register < 4 or self.register > 7:
            raise ValueError(f'Direct access registers are 4, 5, 6, and 7. We have {self.register}.')
        if self.bit_location < 0 or self.bit_location > 7:
            raise ValueError(f'Direct access bit locations are the indices 0-7, we have {self.bit_location}.')

    @classmethod
    def from_swamp_parameter(cls, node):
        if node['param_mask'] != 1:
            raise ValueError(f'We wrote this under the assumption that direct access parameters were single bits but this param_mask=0b{node["param_mask"]:b} implies that it is not!')
        
        reg_mask_bits = f'{node["reg_mask"]:b}'
        return cls(
            register = node['address'],
            bit_location = len(reg_mask_bits)-reg_mask_bits.rindex('1')-1,
            defval = node['defval_mask']==1
        )


    def to_cpp(self):
        """Convert this register location into the C++ equivalent struct

        The `DirectAccessParameter` struct is defined in register_maps/register_maps_types.h
        and included before any of the implementation headers that are generated by this script are included.
        """
        return f'DirectAccessParameter({self.register}, {self.bit_location}, {"true" if self.defval else "false"})'


parser = argparse.ArgumentParser()
parser.add_argument('input', help='input yaml file with direct access registers')
parser.add_argument('output', type=Path, help='output header file')
args = parser.parse_args()

with open(args.input) as f:
    swamp_lut = yaml.safe_load(f)

dap_lut = {
    name: DirectAccessParameter.from_swamp_parameter(node)
    for name, node in swamp_lut['DirectAccess'].items()
}

with open(args.output, 'w') as f:
    f.write(f'/* auto-generated LUT header from {args.input} */\n\n')
    f.write('#pragma once\n\n')
    f.write('#include "register_maps/register_maps_types.h"\n\n')
    f.write('namespace pflib {\n\n')
    f.write('const DirectAccessParameterLUT DIRECT_ACCESS_PARAMETER_LUT = DirectAccessParameterLUT::Mapping({\n')
    f.write(',\n'.join(
        '  {"%s", %s}'%(name, dap.to_cpp())
        for name, dap in dap_lut.items()
    ))
    f.write('\n});\n\n}\n')
